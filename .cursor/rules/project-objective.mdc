---
description: 
globs: 
alwaysApply: true
---
App Name: AWS Cybersecurity Analyzer
Description:
The AWS Cybersecurity & Compliance Analyzer is a web-based application designed to assess and enhance the security posture of AWS resources while ensuring compliance with the NIST Cybersecurity Framework (CSF) 2.0. By integrating AWS security tools like Security Hub, Config, and CloudTrail with an AI-powered agent (using LangChain), the app provides in-depth insights into the security status of AWS assets and their alignment with NIST CSF 2.0.

Users can monitor their AWS infrastructure, detect potential vulnerabilities, and receive automated, actionable recommendations for remediation. The application generates detailed compliance reports, highlights areas of improvement, and allows organizations to continuously track their security and compliance posture. With customizable features, automated security checks, and seamless integration with AWS services, this app simplifies maintaining a secure and compliant AWS environment, empowering teams to proactively manage cybersecurity risks.

Technology Stack
	• Frontend: React.js (dynamic dashboards)
	• Backend: Python (FastAPI) + PostgreSQL
	• AI Layer: LangChain + Claude 3.7
	• Docker + Docker-Compose
	• AWS Integration: Boto3 SDK + AWS Security Hub/Config/Inspector
	• Compliance Engine: NIST CSF 2.0 mapping + Custom Rules

Additional Development Notes
	• Use .env file in the main folder to get database credentials and AWS credentials. Don not create multiple .env files in various folders.
	• If possible use one set of files for docker container and docker within the main project folder, do not create multiple docker files in various folders


Key Steps for Creating the AI Web App
1. Define the Core Features and Requirements
	• AWS Security Posture Assessment: The app should assess the security status of AWS resources such as EC2, S3, IAM, Lambda, VPC, etc.
	• AI Agent (LangChain): Use LangChain to analyze the assets and check their alignment with NIST CSF 2.0.
	• NIST CSF 2.0 Mapping: Align the security and compliance checks to NIST CSF 2.0. Each AWS service or security posture check will map to specific NIST CSF categories (Identify, Protect, Detect, Respond, Recover).
	• User Dashboard: The dashboard should provide users with insights, warnings, and actionable steps to improve security compliance.
2. Set Up the AWS SDK and Permissions
	• Install AWS SDK: You will need the AWS SDK (boto3 for Python) or the AWS SDK for JavaScript, depending on your preferred tech stack.
	• IAM Permissions: Ensure that the IAM role or user has the necessary permissions to access AWS resources and retrieve configuration details for security assessments (e.g., EC2 instances, IAM policies, security groups, etc.).
3. Monitor AWS Security Posture
	• Use AWS Config: AWS Config is a service that tracks resource configuration changes and provides insights into compliance.
	• AWS Security Hub: AWS Security Hub aggregates, organizes, and prioritizes security alerts from AWS services (like GuardDuty, Inspector, etc.). You can use its findings to get real-time insights into your AWS resources.
	• CloudTrail for Monitoring Logs: Integrate AWS CloudTrail to track API calls and ensure that all activities on AWS resources are logged.
Security Checks:
	• Identity and Access Management (IAM): Check for overly permissive IAM policies and roles, ensure MFA is enabled, and evaluate least-privilege principles.
	• Network Security: Ensure VPC configurations (NACLs, security groups) are properly set up.
	• Encryption: Ensure that all sensitive data is encrypted at rest and in transit, including for S3 buckets, RDS, and other storage services.
4. LangChain AI Integration
LangChain is a powerful tool for building language models that can execute tasks based on natural language input, which can be ideal for evaluating and aligning security posture to NIST CSF 2.0.
Steps for integrating LangChain:
	• Set up LangChain: Integrate LangChain into your backend (using Python). LangChain can interface with large language models (use Claude API) and can be used to interpret security posture and compliance.
	• NIST CSF Mapping: Create a database or knowledge base where the NIST CSF 2.0 controls are mapped to AWS resources and security configurations. LangChain can retrieve relevant NIST CSF categories and evaluate whether the security posture of each AWS resource aligns with those controls.
    For example:
		○ Identify (ID): Is there an asset inventory? Are IAM roles defined with strict permissions?
		○ Protect (PR): Are encryption and access controls configured correctly for each asset?
		○ Detect (DE): Are monitoring and alerting systems in place, such as AWS GuardDuty, CloudWatch, and CloudTrail?
		○ Respond (RS): Does the AWS environment have automated response protocols?
		○ Recover (RC): Is there a disaster recovery strategy in place for AWS resources?
	• LangChain Workflow: Create workflows to process findings from AWS resources and use LangChain’s natural language processing capabilities to provide a detailed report. This report can also provide a recommendation on what actions need to be taken to achieve NIST CSF alignment.
5. Web App Development
	• Frontend: Build a user-friendly frontend (using React). The frontend should display security postures, compliance reports, and actionable recommendations.
	• Backend: Use a backend (Python FastAPI) to integrate with AWS APIs, process LangChain results, and serve the data to the frontend.
	• Authentication: Implement user authentication to control access to the application. Consider using AWS Cognito or another identity provider for secure sign-ins.
6. Compliance Reporting
	• Generate Compliance Reports: Based on the AWS security posture and NIST CSF alignment, the app should be able to generate compliance reports in formats like PDF or CSV. These reports should detail the findings, any areas of non-compliance, and suggested fixes.
	• Notification System: Integrate notifications for any detected compliance issues. This could be done via email, SMS, or in-app notifications.
Additional Features that Could Be Helpful:
	1. Automated Remediation: Allow users to automate remediation tasks (e.g., fixing IAM permissions, adjusting security groups) directly from the dashboard using AWS SDK.
	2. Integrate with AWS Well-Architected Tool: The AWS Well-Architected Tool provides best practices for security and architecture. Integrating this tool into the app can provide an additional layer of analysis for users.
	3. Customizable NIST CSF 2.0 Mapping: Allow users to customize the mapping between AWS resources and NIST CSF 2.0. Organizations might have specific needs based on their business type, and the ability to customize the alignment is useful.
	4. Historical Trends and Monitoring: Enable users to track their compliance and security posture over time. Provide a historical view of security metrics and how they’ve improved (or worsened) over time.
	5. Third-party Integrations: Consider integrating with third-party services such as Splunk, Datadog, or PagerDuty for extended monitoring and incident response.
	6. User Role Management: Allow organizations to create different user roles (e.g., admins, auditors) with varying levels of access to the security dashboard and reports.
High-Level Architecture Overview:
	1. Frontend: React interface for displaying the security posture, NIST CSF alignment, and reports.
	2. Backend: A RESTful API (Python FastAPI) to fetch AWS resource data, integrate LangChain, and process compliance checks.
	3. LangChain Integration: Use LangChain as an AI agent to interpret security posture and NIST CSF alignment.
	4. AWS Services: Use AWS Config, Security Hub, CloudTrail, and other AWS tools to gather security data.
	5. Database: Use a database (PostgreSQL) to store compliance records, reports, and user data.
Sample LangChain Workflow for NIST CSF 2.0 Mapping:
	1. Input: AWS resource configurations (IAM roles, EC2 settings, S3 bucket policies, etc.).
	2. LangChain Task: The AI agent processes each resource’s configuration and checks it against the NIST CSF 2.0 categories.
	3. Output: A report that explains which NIST CSF 2.0 controls are met, which aren’t, and provides recommended changes.
